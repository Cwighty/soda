@page "/orders"
@using SodaShared.Models
@using SodaShared.Services;

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            @if (Purchases != null)
            {
                <table class="table table-striped">
                    <thead class="thead-dark">
                        <tr>
                            <th>Order Id</th>
                            <th>Status</th>
                            <th>Date Created</th>
                            <th>Sub Total Paid</th>
                            <th>Customer</th>
                            <th>Details</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var statusGroup in Purchases.GroupBy(p => p.Status).OrderByDescending(g => g.Key.ToLower() == "completed"))
                        {
                            <tr>
                                <td colspan="6" class="status"><b>@statusGroup.Key</b></td>
                            </tr>
                            @foreach (var purchase in statusGroup.OrderByDescending(p => p.CompletedAt).ThenByDescending(p => p.CreatedAt))
                            {
                                <tr>
                                    <td>@purchase.Id</td>
                                    <td>@purchase.Status</td>
                                    <td>@purchase.CreatedAt</td>
                                    <td>@purchase.SubTotal?.ToString("C")</td>
                                    <td>@purchase.Customer?.Name</td>
                                    <td>
                                        <ul>
                                            @foreach (var item in purchase.PurchaseItems)
                                            {
                                                <li>
                                                    @item.Base.Price.ToString("C") - @item.Name
                                                    @if (item.AddOns != null && item.AddOns.Any())
                                                    {
                                                        <ul>
                                                            @foreach (var addon in item.AddOns)
                                                            {
                                                                <li>@addon.Price.ToString("C") - @addon.Name</li>
                                                            }
                                                        </ul>
                                                    }
                                                </li>
                                            }
                                        </ul>
                                    </td>
                                    <td>
                                        @if (purchase.Status.ToLower() != "completed")
                                        {
                                            <button class="btn btn-primary" @onclick="() => CompletePurchase(purchase.Id)">Mark as Complete</button>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    [Inject] private OrderService orderService { get; set; }
    private List<Purchase> Purchases { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPurchases();
    }

    private async Task LoadPurchases()
    {
        Purchases = await orderService.GetOrders();
        StateHasChanged();
    }

    private async Task CompletePurchase(int purchaseId)
    {
        var purchase = orderService.MarkOrderComplete(purchaseId);
        await LoadPurchases(); // Reload the purchases to update the UI
    }
}
