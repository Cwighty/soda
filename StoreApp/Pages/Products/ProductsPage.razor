@page "/products"
@using Microsoft.AspNetCore.Components.Forms
@using SodaShared.Models;
@using SodaShared.Services;
@using Blazorise
@using StoreApp.Components
@using Size = SodaShared.Models.Size;
@inject ProductRepository ProductService

<h1>Products</h1>

<div class="row">
    <div class="col-12">
        <button class="btn btn-primary mb-3" @onclick="ShowAddProductModal">Add New Product</button>
    </div>
</div>
@if (products != null)
{

    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                <div class="card shadow">
                    <img class="card-img-top" src="@product.ImageUrl" alt="Product Image">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="badge badge-secondary">Base: @product.Base.Name</span>
                            <span class="badge badge-secondary">Price: @product.SpecialPrice?.ToString("C")</span>
                        </div>
                        <p class="mt-2 mb-0"><b>Addons:</b></p>
                        <div>
                            @foreach (var addOn in product.AddOns)
                            {
                                <span class="badge badge-pill badge-info">@addOn.Name</span>
                            }
                        </div>
                        <hr />
                        <div class="d-flex justify-content-between mt-3">
                            <button class="btn btn-outline-primary" @onclick="() => ShowEditProductModal(product)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-outline-danger" @onclick="() => DeleteProduct(product)"><i class="bi bi-trash"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>


    <Modal Title="@modalTitle" @ref="productModal">
        <ModalContent Centered>
        <ModalBody>
            <EditForm Model="@editProduct">
                <div class="form-group">
                    <label for="name">Name:</label>
                    <InputText class="form-control" @bind-Value="editProduct.Name" />
                </div>
                <div class="form-group">
                    <label for="description">Description:</label>
                    <InputTextArea class="form-control" @bind-Value="editProduct.Description" />
                </div>
                <div class="form-group">
                    <label for="price">Price:</label>
                    <InputNumber class="form-control" @bind-Value="editProduct.SpecialPrice" />
                </div>
                <div class="form-group">
                    <label for="drinkBase">Base:</label>
                    <InputSelect class="form-control" @bind-Value="@editProduct.Base.Id">
                        @foreach (var b in bases)
                        {
                            <option value="@b.Id">@b.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="addOns">Add-Ons:</label>
                    <div class="row mx-1 p-0">
                        <select class="col-10 me-4 form-control" @bind="selectedAddOn">
                            <option value="">--Select an Add-On--</option>
                            @foreach (var addOn in addOns)
                            {
                                <option value="@addOn.Id">@addOn.Name - @addOn.Price</option>
                            }
                        </select>
                        <button class="col-1 btn btn-primary" @onclick="AddAddOn"><i class="bi bi-plus"></i></button>
                    </div>
                </div>

                <ul class="list-group">
                    @foreach (var addOn in editProduct.AddOns)
                    {
                        <li class="list-group-item">@addOn.Name - @addOn.Price<button class="btn btn-danger btn-sm float-right" @onclick="() => RemoveAddOn(addOn)">Remove</button></li>
                    }
                </ul>
                <ImageUploader @bind-ImageDataBytes="@newImageBytes" />
                </EditForm>
            </ModalBody>
            <ModalFooter>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="SaveProduct">Save</button>
                    <button class="btn btn-secondary" @onclick="HideProductModal">Cancel</button>
                </div>
            </ModalFooter>
        </ModalContent>
    </Modal>
}



@code {
    List<Product> products;
    List<Size> sizes;
    List<Base> bases;
    List<AddOn> addOns;
    Product editProduct = new Product();
    Modal? productModal;
    string? modalTitle;
    private int selectedAddOn;
    private byte[] newImageBytes;


    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProducts();
        sizes = await ProductService.GetSizes();
        bases = await ProductService.GetBases();
        addOns = await ProductService.GetAddOns();
    }

    private void ShowAddProductModal()
    {
        modalTitle = "Add New Product";
        editProduct = new Product();
        newImageBytes = null;
        productModal.Show();
    }

    private void ShowEditProductModal(Product product)
    {
        modalTitle = "Edit Product";
        editProduct = product.Clone();
        newImageBytes = null;
        productModal.Show();
    }

    private async Task SaveProduct()
    {
        if (newImageBytes != null)
        {
            editProduct.ImageUrl = await ProductService.AddImage(newImageBytes);
        }
        if (editProduct.Id == 0)
        {
            await ProductService.CreateProduct(editProduct);
            products.Add(editProduct);
        }
        else
        {
            await ProductService.UpdateProduct(editProduct);
            var index = products.FindIndex(p => p.Id == editProduct.Id);
            products[index] = editProduct;
            await OnInitializedAsync();
            StateHasChanged();
        }
        await productModal.Hide();
    }

    private async Task DeleteProduct(Product product)
    {
        await ProductService.DeleteProduct(product);
        products.Remove(product);
    }

    private void AddAddOn()
    {
        var addon = addOns.Where(a => a.Id == selectedAddOn).FirstOrDefault();
        if (selectedAddOn != null && !editProduct.AddOns.Contains(addon))
        {
            editProduct.AddOns.Add(addon);
            selectedAddOn = 0;
        }
    }

    private void RemoveAddOn(AddOn addOn)
    {
        editProduct.AddOns.Remove(addOn);
    }

    private void HideProductModal()
    {
        newImageBytes = null;
        productModal.Hide();
    }
}