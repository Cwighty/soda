@page "/bases"
@using Microsoft.AspNetCore.Components.Forms
@using SodaShared.Models;
@using SodaShared.Services;
@using Blazorise
@using StoreApp.Components
@using Size = SodaShared.Models.Size;
@inject ProductRepository ProductService

<h1>Drink Base Categories</h1>

<div class="row">
    <div class="col-12">
        <button class="btn btn-primary my-3" @onclick="ShowAddBaseTypeModal">Add New Base Category</button>
    </div>
</div>
@if (baseTypes != null)
{

    <div class="row">
        @foreach (var baseType in baseTypes)
        {
            <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">@baseType.Name</h5>
                        <p class="mt-2 mb-0"><b>Sizes:</b></p>
                        <div>
                            @foreach (var size in baseType.Sizes)
                            {
                                <span class="badge badge-pill badge-info">@size.Name</span>
                            }
                        </div>
                        <hr />
                        <div class="d-flex justify-content-between mt-3">
                            <button class="btn btn-outline-primary" @onclick="() => ShowEditBaseTypeModal(baseType)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-outline-danger" @onclick="() => DeleteBaseType(baseType)"><i class="bi bi-trash"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>


    <Modal Title="@modalTitle" @ref="baseTypeModal">
        <ModalContent Centered>
        <ModalBody>
            <EditForm Model="@editBaseType">
                <div class="form-group">
                    <label for="name">Name:</label>
                    <InputText class="form-control" @bind-Value="@editBaseType.Name" />
                </div>
                <div class="form-group">
                    <label for="addOns">Sizes:</label>
                    <div class="row mx-1 p-0">
                        <select class="col-10 me-4 form-control" @bind="selectedSize">
                            <option value="">--Select a Size--</option>
                            @foreach (var size in sizes)
                            {
                                <option value="@size.Id">@size.Name - @size.Price</option>
                            }
                            </select>
                            <button class="col-1 btn btn-primary" @onclick="AddSize"><i class="bi bi-plus"></i></button>
                        </div>
                    </div>
                    <ul class="list-group">
                        @foreach (var size in editBaseType.Sizes)
                        {
                            <li class="list-group-item">@size.Name - @size.Price<button class="btn btn-danger btn-sm float-right" @onclick="() => RemoveSize(size)">Remove</button></li>
                        }
                    </ul>
            </EditForm>
        </ModalBody>
        <ModalFooter>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="SaveBaseType">Save</button>
                <button class="btn btn-secondary" @onclick="HideBaseTypeModal">Cancel</button>
            </div>
        </ModalFooter>
    </ModalContent>
</Modal>
}

<h1 class="mt-5">Drink Bases</h1>

<div class="row">
    <div class="col-12">
        <button class="btn btn-primary my-3" @onclick="ShowAddDrinkBaseModal">Add New Base</button>
    </div>
</div>
@if (drinkBases != null)
{
    <div class="row">
        @foreach (var drinkBase in drinkBases)
        {
            <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">@drinkBase.Name</h5>
                        <p class="card-text">@drinkBase.Description</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="badge badge-secondary">Price: @drinkBase.Price.ToString("C")</span>
                        </div>
                        <hr />
                        <div class="d-flex justify-content-between mt-3">
                            <button class="btn btn-outline-primary" @onclick="() => ShowEditDrinkBaseModal(drinkBase)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-outline-danger" @onclick="() => DeleteDrinkBase(drinkBase)"><i class="bi bi-trash"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>


    <Modal Title="@modalTitle" @ref="drinkBaseModal">
        <ModalContent Centered>
            <ModalBody>
                <EditForm Model="@editDrinkBase">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <InputText class="form-control" @bind-Value="@editDrinkBase.Name" />
                    </div>
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <InputText class="form-control" @bind-Value="@editDrinkBase.Description" />
                    </div>
                    <div class="form-group">
                        <label for="price">Price:</label>
                        <InputNumber class="form-control" @bind-Value="@editDrinkBase.Price" />
                    </div>
                    <div class="form-group">
                        <label for="type">Type:</label>
                        <InputSelect class="form-control" @bind-Value="@editDrinkBase.BaseType.Id">
                            @foreach (var baseType in baseTypes)
                            {
                                <option value="@baseType.Id">@baseType.Name</option>
                            }
                        </InputSelect>
                    </div>
                </EditForm>
            </ModalBody>
            <ModalFooter>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="SaveDrinkBase">Save</button>
                    <button class="btn btn-secondary" @onclick="HideDrinkBaseModal">Cancel</button>
                </div>
            </ModalFooter>
        </ModalContent>
    </Modal>
}



@code {
    List<Base> drinkBases;
    List<BaseType> baseTypes;
    List<Size> sizes;
    int selectedSize;
    Base editDrinkBase = new Base();
    BaseType editBaseType = new BaseType();
    Modal? drinkBaseModal;
    Modal? baseTypeModal;
    string? modalTitle;


    protected override async Task OnInitializedAsync()
    {
        drinkBases = await ProductService.GetBases();
        baseTypes = await ProductService.GetBaseTypes();
        sizes = await ProductService.GetSizes();
    }

    private void ShowAddDrinkBaseModal()
    {
        modalTitle = "Add New Add-On";
        editDrinkBase = new Base();
        drinkBaseModal.Show();
    }

    private void ShowEditDrinkBaseModal(Base drinkBase)
    {
        modalTitle = "Edit Add-On";
        editDrinkBase = drinkBase.Clone();
        drinkBaseModal.Show();
    }

    private async Task SaveDrinkBase()
    {
        if (editDrinkBase.Id == 0)
        {
            await ProductService.CreateBase(editDrinkBase);
            drinkBases.Add(editDrinkBase);
        }
        else
        {
            await ProductService.UpdateBase(editDrinkBase);
            var index = drinkBases.FindIndex(p => p.Id == editDrinkBase.Id);
            drinkBases[index] = editDrinkBase;
            await OnInitializedAsync();
            StateHasChanged();
        }
        await drinkBaseModal.Hide();
    }

    private async Task DeleteDrinkBase(Base drinkBase)
    {
        await ProductService.DeleteBase(drinkBase);
        drinkBases.Remove(drinkBase);
    }

    private void AddSize()
    {
        var size = sizes.Where(s => s.Id == selectedSize).FirstOrDefault();
        if (selectedSize != null && !editBaseType.Sizes.Contains(size))
        {
            editBaseType.Sizes.Add(size);
            selectedSize = 0;
        }
    }

    private void RemoveSize(Size size)
    {
        editBaseType.Sizes.Remove(size);
    }

    private void HideDrinkBaseModal()
    {
        drinkBaseModal.Hide();
    }

    private void ShowAddBaseTypeModal()
    {
        modalTitle = "Add New Add-On";
        editBaseType = new BaseType();
        baseTypeModal.Show();
    }

    private void ShowEditBaseTypeModal(BaseType baseType)
    {
        modalTitle = "Edit Add-On";
        editBaseType = baseType.Clone();
        baseTypeModal.Show();
    }

    private async Task SaveBaseType()
    {
        if (editBaseType.Id == 0)
        {
            await ProductService.CreateBaseType(editBaseType);
            baseTypes.Add(editBaseType);
        }
        else
        {
            await ProductService.UpdateBaseType(editBaseType);
            var index = baseTypes.FindIndex(p => p.Id == editBaseType.Id);
            baseTypes[index] = editBaseType;
            await OnInitializedAsync();
            StateHasChanged();
        }
        await baseTypeModal.Hide();
    }

    private async Task DeleteBaseType(BaseType baseType)
    {
        await ProductService.DeleteBaseType(baseType);
        baseTypes.Remove(baseType);
    }

    private void HideBaseTypeModal()
    {
        baseTypeModal.Hide();
    }
}