@page "/basetypes"
@using Microsoft.AspNetCore.Components.Forms
@using SodaShared.Models;
@using SodaShared.Services;
@using Blazorise
@using StoreApp.Components
@inject ProductCRUDService ProductService

<h1>Drink Base Types</h1>

<div class="row">
    <div class="col-12">
        <button class="btn btn-primary mb-3" @onclick="ShowAddBaseTypeModal">Add New Base Type</button>
    </div>
</div>
@if (baseTypes != null)
{

    <div class="row">
        @foreach (var baseType in baseTypes)
        {
            <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">@baseType.Name</h5>
                        <div class="d-flex justify-content-between mt-3">
                            <button class="btn btn-outline-primary" @onclick="() => ShowEditBaseTypeModal(baseType)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-outline-danger" @onclick="() => DeleteBaseType(baseType)"><i class="bi bi-trash"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>


    <Modal Title="@modalTitle" @ref="baseTypeModal">
        <ModalContent Centered>
        <ModalBody>
            <EditForm Model="@editBaseType">
                <div class="form-group">
                    <label for="name">Name:</label>
                    <InputText class="form-control" @bind-Value="@editBaseType.Name" />
                </div>
                </EditForm>
            </ModalBody>
            <ModalFooter>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="SaveBaseType">Save</button>
                    <button class="btn btn-secondary" @onclick="HideBaseTypeModal">Cancel</button>
                </div>
            </ModalFooter>
        </ModalContent>
    </Modal>
}



@code {
    List<BaseType> baseTypes;
    BaseType editBaseType = new BaseType();
    Modal? baseTypeModal;
    string? modalTitle;


    protected override async Task OnInitializedAsync()
    {
        baseTypes = await ProductService.GetBaseTypes();
    }

    private void ShowAddBaseTypeModal()
    {
        modalTitle = "Add New Add-On";
        editBaseType = new BaseType();
        baseTypeModal.Show();
    }

    private void ShowEditBaseTypeModal(BaseType baseType)
    {
        modalTitle = "Edit Add-On";
        editBaseType = baseType.Clone();
        baseTypeModal.Show();
    }

    private async Task SaveBaseType()
    {
        if (editBaseType.Id == 0)
        {
            await ProductService.CreateBaseType(editBaseType);
            baseTypes.Add(editBaseType);
        }
        else
        {
            await ProductService.UpdateBaseType(editBaseType);
            var index = baseTypes.FindIndex(p => p.Id == editBaseType.Id);
            baseTypes[index] = editBaseType;
            await OnInitializedAsync();
            StateHasChanged();
        }
        await baseTypeModal.Hide();
    }

    private async Task DeleteBaseType(BaseType baseType)
    {
        await ProductService.DeleteBaseType(baseType);
        baseTypes.Remove(baseType);
    }

    private void HideBaseTypeModal()
    {
        baseTypeModal.Hide();
    }
}