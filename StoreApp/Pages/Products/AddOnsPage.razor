@page "/addons"
@using Microsoft.AspNetCore.Components.Forms
@using SodaShared.Models;
@using SodaShared.Services;
@using Blazorise
@using StoreApp.Components
@using StoreApp.Services;
@inject ProductRepository ProductService
@inject AuthorizationService Auth;

@if (isAdmin)
{

    <h1>Add-On Categories</h1>

    <div class="row">
        <div class="col-12">
            <button class="btn btn-primary" @onclick="ShowAddAddOnTypeModal">Add New Add-On Category</button>
        </div>
    </div>
    @if (addOnTypes != null)
    {

        <div class="row">
            @foreach (var addOnType in addOnTypes)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 my-3">
                    <div class="card shadow">
                        <div class="card-body">
                            <h5 class="card-title">@addOnType.Name</h5>
                            <hr />
                            <div class="d-flex justify-content-between mt-3">
                                <button class="btn btn-outline-primary" @onclick="() => ShowEditAddOnTypeModal(addOnType)"><i class="bi bi-pencil"></i></button>
                                <button class="btn btn-outline-danger" @onclick="() => DeleteAddOnType(addOnType)"><i class="bi bi-trash"></i></button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>


        <Modal Title="@modalTitle" @ref="addOnTypeModal">
            <ModalContent Centered>
            <ModalBody>
                <EditForm Model="@editAddOnType">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <InputText class="form-control" @bind-Value="@editAddOnType.Name" />
                    </div>
                </EditForm>
            </ModalBody>
            <ModalFooter>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="SaveAddOnType">Save</button>
                    <button class="btn btn-secondary" @onclick="HideAddOnTypeModal">Cancel</button>
                </div>
            </ModalFooter>
        </ModalContent>
    </Modal>
    }

    <h1 class="mt-5">Add-Ons</h1>

    <div class="row">
        <div class="col-12">
            <button class="btn btn-primary" @onclick="ShowAddAddOnModal">Add New Add On</button>
        </div>
    </div>
    @if (addOns != null)
    {
        @foreach (var addOnGroup in addOns
                                   .GroupBy(a => a.AddOnType)
                                   .Select(g => Tuple.Create(g.Key, g.ToList())))
        {
            <h2>@addOnGroup.Item1.Name</h2>
            <hr />
            <div class="row">
                @foreach (var addOn in addOnGroup.Item2)
                {
                    <div class="col-lg-3 col-md-4 col-sm-6 my-3">
                        <div class="card shadow">
                            <div class="card-body">
                                <h5 class="card-title">@addOn.Name</h5>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="badge badge-secondary">Price: @addOn.Price.ToString("C")</span>
                                </div>
                                <hr />
                                <div class="d-flex justify-content-between mt-3">
                                    <button class="btn btn-outline-primary" @onclick="() => ShowEditAddOnModal(addOn)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" @onclick="() => DeleteAddOn(addOn)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }


        <Modal Title="@modalTitle" @ref="addOnModal">
            <ModalContent Centered>
            <ModalBody>
                <EditForm Model="@editAddOn">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <InputText class="form-control" @bind-Value="@editAddOn.Name" />
                    </div>
                    <div class="form-group">
                        <label for="price">Price:</label>
                        <InputNumber class="form-control" @bind-Value="@editAddOn.Price" />
                    </div>
                    <div class="form-group">
                        <label for="type">Type:</label>
                        <InputSelect class="form-control" @bind-Value="@editAddOn.AddOnType.Id">
                            @foreach (var addOnType in addOnTypes)
                                {
                                    <option value="@addOnType.Id">@addOnType.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </EditForm>
                </ModalBody>
                <ModalFooter>
                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="SaveAddOn">Save</button>
                        <button class="btn btn-secondary" @onclick="HideAddOnModal">Cancel</button>
                    </div>
                </ModalFooter>
            </ModalContent>
        </Modal>
    }
}
else
{
    <h1>Unauthorized</h1>
}



@code {
    List<AddOn> addOns;
    List<AddOnType> addOnTypes;
    AddOn editAddOn = new AddOn();
    AddOnType editAddOnType = new AddOnType();
    Modal? addOnModal;
    Modal? addOnTypeModal;
    string? modalTitle;
    private int selectedAddOn;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        isAdmin = Auth.IsAdmin();
        addOns = await ProductService.GetAddOns();
        addOnTypes = await ProductService.GetAddOnTypes();
    }

    private void ShowAddAddOnModal()
    {
        modalTitle = "Add New Add-On";
        editAddOn = new AddOn();
        addOnModal.Show();
    }

    private void ShowEditAddOnModal(AddOn addOn)
    {
        modalTitle = "Edit Add-On";
        editAddOn = addOn.Clone();
        addOnModal.Show();
    }

    private async Task SaveAddOn()
    {
        if (editAddOn.Id == 0)
        {
            await ProductService.CreateAddOn(editAddOn);
            addOns.Add(editAddOn);
        }
        else
        {
            await ProductService.UpdateAddOn(editAddOn);
            var index = addOns.FindIndex(p => p.Id == editAddOn.Id);
            addOns[index] = editAddOn;
            await OnInitializedAsync();
            StateHasChanged();
        }
        await addOnModal.Hide();
    }

    private async Task DeleteAddOn(AddOn addOn)
    {
        await ProductService.DeleteAddOn(addOn);
        addOns.Remove(addOn);
    }

    private void HideAddOnModal()
    {
        addOnModal.Hide();
    }

    private void ShowAddAddOnTypeModal()
    {
        modalTitle = "Add New Add-On";
        editAddOnType = new AddOnType();
        addOnTypeModal.Show();
    }

    private void ShowEditAddOnTypeModal(AddOnType addOnType)
    {
        modalTitle = "Edit Add-On";
        editAddOnType = addOnType.Clone();
        addOnTypeModal.Show();
    }

    private async Task SaveAddOnType()
    {
        if (editAddOnType.Id == 0)
        {
            await ProductService.CreateAddOnType(editAddOnType);
            addOnTypes.Add(editAddOnType);
        }
        else
        {
            await ProductService.UpdateAddOnType(editAddOnType);
            var index = addOnTypes.FindIndex(p => p.Id == editAddOnType.Id);
            addOnTypes[index] = editAddOnType;
            await OnInitializedAsync();
            StateHasChanged();
        }
        await addOnTypeModal.Hide();
    }

    private async Task DeleteAddOnType(AddOnType addOnType)
    {
        await ProductService.DeleteAddOnType(addOnType);
        addOnTypes.Remove(addOnType);
    }

    private void HideAddOnTypeModal()
    {
        addOnTypeModal.Hide();
    }
}