@page "/addons"
@using Microsoft.AspNetCore.Components.Forms
@using SodaShared.Models;
@using SodaShared.Services;
@using Blazorise
@using StoreApp.Components
@inject ProductCRUDService ProductService

<h1>Add-Ons</h1>

<div class="row">
    <div class="col-12">
        <button class="btn btn-primary mb-3" @onclick="ShowAddAddOnModal">Add New Add On</button>
    </div>
</div>
@if (addOns != null)
{

    <div class="row">
        @foreach (var addon in addOns)
        {
            <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">@addon.Name</h5>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="badge badge-secondary">Price: @addon.Price.ToString("C")</span>
                        </div>
                        <div class="d-flex justify-content-between mt-3">
                            <button class="btn btn-outline-primary" @onclick="() => ShowEditAddOnModal(addon)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-outline-danger" @onclick="() => DeleteAddOn(addon)"><i class="bi bi-trash"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>


    <Modal Title="@modalTitle" @ref="addOnModal">
        <ModalContent Centered>
            <ModalBody>
                <EditForm Model="@editAddOn">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <InputText class="form-control" @bind-Value="@editAddOn.Name" />
                    </div>
                    <div class="form-group">
                        <label for="price">Price:</label>
                        <InputNumber class="form-control" @bind-Value="@editAddOn.Price" />
                    </div>
                    <div class="form-group">
                        <label for="type">Type:</label>
                        <InputSelect class="form-control" @bind-Value="@editAddOn.AddOnType.Id">
                            @foreach (var addOnType in addOnTypes)
                            {
                                <option value="@addOnType.Id">@addOnType.Name</option>
                            }
                        </InputSelect>
                    </div>
                </EditForm>
            </ModalBody>
            <ModalFooter>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="SaveAddOn">Save</button>
                    <button class="btn btn-secondary" @onclick="HideAddOnModal">Cancel</button>
                </div>
            </ModalFooter>
        </ModalContent>
    </Modal>
}



@code {
    List<AddOn> addOns;
    List<AddOnType> addOnTypes;
    AddOn editAddOn = new AddOn();
    Modal? addOnModal;
    string? modalTitle;
    private int selectedAddOn;
    private byte[] newImageBytes;


    protected override async Task OnInitializedAsync()
    {
        addOns = await ProductService.GetAddOns();
        addOnTypes = await ProductService.GetAddOnTypes();
    }

    private void ShowAddAddOnModal()
    {
        modalTitle = "Add New Add-On";
        editAddOn = new AddOn();
        addOnModal.Show();
    }

    private void ShowEditAddOnModal(AddOn addOn)
    {
        modalTitle = "Edit Add-On";
        editAddOn = addOn.Clone();
        addOnModal.Show();
    }

    private async Task SaveAddOn()
    {
        if (editAddOn.Id == 0)
        {
            await ProductService.CreateAddOn(editAddOn);
            addOns.Add(editAddOn);
        }
        else
        {
            await ProductService.UpdateAddOn(editAddOn);
            var index = addOns.FindIndex(p => p.Id == editAddOn.Id);
            addOns[index] = editAddOn;
            await OnInitializedAsync();
            StateHasChanged();
        }
        await addOnModal.Hide();
    }

    private async Task DeleteAddOn(AddOn addOn)
    {
        await ProductService.DeleteAddOn(addOn);
        addOns.Remove(addOn);
    }

    private void HideAddOnModal()
    {
        addOnModal.Hide();
    }
}