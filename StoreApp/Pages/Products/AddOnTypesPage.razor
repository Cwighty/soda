@page "/addontypes"
@using Microsoft.AspNetCore.Components.Forms
@using SodaShared.Models;
@using SodaShared.Services;
@using Blazorise
@using StoreApp.Components
@inject ProductCRUDService ProductService

<h1>Drink Add-On Types</h1>

<div class="row">
    <div class="col-12">
        <button class="btn btn-primary mb-3" @onclick="ShowAddAddOnTypeModal">Add New Add-On Type</button>
    </div>
</div>
@if (addOnTypes != null)
{

    <div class="row">
        @foreach (var addOnType in addOnTypes)
        {
            <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                <div class="card shadow">
                    <div class="card-body">
                        <h5 class="card-title">@addOnType.Name</h5>
                        <div class="d-flex justify-content-between mt-3">
                            <button class="btn btn-outline-primary" @onclick="() => ShowEditAddOnTypeModal(addOnType)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-outline-danger" @onclick="() => DeleteAddOnType(addOnType)"><i class="bi bi-trash"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>


    <Modal Title="@modalTitle" @ref="addOnTypeModal">
        <ModalContent Centered>
        <ModalBody>
            <EditForm Model="@editAddOnType">
                <div class="form-group">
                    <label for="name">Name:</label>
                    <InputText class="form-control" @bind-Value="@editAddOnType.Name" />
                </div>
            </EditForm>
        </ModalBody>
        <ModalFooter>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="SaveAddOnType">Save</button>
                <button class="btn btn-secondary" @onclick="HideAddOnTypeModal">Cancel</button>
            </div>
        </ModalFooter>
    </ModalContent>
</Modal>
}



@code {
    List<AddOnType> addOnTypes;
    AddOnType editAddOnType = new AddOnType();
    Modal? addOnTypeModal;
    string? modalTitle;


    protected override async Task OnInitializedAsync()
    {
        addOnTypes = await ProductService.GetAddOnTypes();
    }

    private void ShowAddAddOnTypeModal()
    {
        modalTitle = "Add New Add-On";
        editAddOnType = new AddOnType();
        addOnTypeModal.Show();
    }

    private void ShowEditAddOnTypeModal(AddOnType addOnType)
    {
        modalTitle = "Edit Add-On";
        editAddOnType = addOnType.Clone();
        addOnTypeModal.Show();
    }

    private async Task SaveAddOnType()
    {
        if (editAddOnType.Id == 0)
        {
            await ProductService.CreateAddOnType(editAddOnType);
            addOnTypes.Add(editAddOnType);
        }
        else
        {
            await ProductService.UpdateAddOnType(editAddOnType);
            var index = addOnTypes.FindIndex(p => p.Id == editAddOnType.Id);
            addOnTypes[index] = editAddOnType;
            await OnInitializedAsync();
            StateHasChanged();
        }
        await addOnTypeModal.Hide();
    }

    private async Task DeleteAddOnType(AddOnType addOnType)
    {
        await ProductService.DeleteAddOnType(addOnType);
        addOnTypes.Remove(addOnType);
    }

    private void HideAddOnTypeModal()
    {
        addOnTypeModal.Hide();
    }
}