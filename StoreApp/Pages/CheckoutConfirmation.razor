@page "/confirm"
@using AutoMapper
@using SodaShared.Models
@using SodaShared.Models.Data
@inject Supabase.Client client
@inject IMapper mapper
    <head>
     <style>
        .total-price {
            background-color: #f5f5f5;
            border-radius: 6px;
            color: #32325d;
            font-size: 1.5rem;
            font-weight: 600;
            padding: 1rem;
            margin: 2rem 0;
            margin-bottom: 0;
        }

        .total-price span {
            color: #6b7c93;
            font-size: 1rem;
            font-weight: 400;
        }
    </style>
</head>
<h1 class="text-center">Confirm Your Order!</h1>

@if (Purchase != null)
{
    <div class="">
        <div class="row">
            <div class="col-md-12 p-0 m-0">
                <table class="table mx-2 my-0">
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Purchase.PurchaseItems)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.CalculatedPrice.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="total-price my-0">Total Price: <span>@Purchase.PricePaid.ToString("C")</span></div>
            </div>
        </div>
                <div class="m-0">
                <iframe class="my-0" style="height:100vh; width:85vw;" scrolling="no" src="/checkout.html?intent=@Intent#payment-form"></iframe>
                </div>
    </div>
}
else
{
    <h3> Loading... </h3>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Intent { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string OrderId { get; set; }
    [Parameter]
    public Purchase Purchase { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var purchase = await client.From<PurchaseWithItemsData>()
        .Filter("id", Postgrest.Constants.Operator.Equals, OrderId)
        .Get();
        Purchase = mapper.Map(purchase.Models.FirstOrDefault(), Purchase);
    }
}
